namespace Grantlee
{

/**

@page for_app_dev Grantlee for application developers

Integrating %Grantlee into applications is very simple. This page describes

@li How to render a Template with a Context
@li How to load Templates
@li How to extend the syntax of %Grantlee
@li Patterns of use of %Grantlee
@li Differences between Django and %Grantlee

If you are not already familiar with Django template syntax and structure, start with @ref for_themers.

@section rendering_templates Rendering Templates

@subsection creating_templates Creating Templates

Rendering templates is also very easy in application code. A single Template may be rendered multiple times with different Context objects.

@code
Template *t = new Template(this);
t->setContent("My name is {{ name }}.");
QVariantHash mapping;
mapping.insert("name", "Grainne");
Context c(mapping);

t->render(&c); // Returns "My name is Grainne."

mapping.insert("name", "Henry");
c = Context(mapping);

t.render(&c); // Returns "My name is Henry."
@endcode

Ususally, applications will not create a Template directly, but instead use a TemplateLoader to load external files. This allows artists to define the template without needing to recompile.

@code
TemplateLoader *loader = TemplateLoader::instance();
Template *t = loader->getTemplate("template.html", this);

t->render(&c)
@endcode

@subsection variables Variables

A Context object maps a string to another object for reference in the template. String keys in the Context object are available as variables in the Template, and can be used with the <tt>{{&nbsp;variable&nbsp;}}</tt> syntax or inside <tt>{%&nbsp;control&nbsp;tags&nbsp;%}</tt>. In the above example, we mapped the string <tt>"name"</tt> to the string <tt>"Grainne"</tt> and then to the string <tt>"Henry"</tt>. We can create more than just string mappings though.

@code
mapping.insert("myint", 6); // Can insert ints
mapping.insert("mydouble", 6.5); // Can insert doubles
mapping.insert("mybool", false); // Can insert bools

QVariantList mylist;
mylist << "Ingrid" << 3;
mapping.insert("mylist", mylist); // Can insert QVariantList

QVariantHash myhash;
myhash.insert("James", "Artist");
myhash.insert("Kiera", "Dreamer");
mapping.insert("myhash", myhash); // Can insert QVariantHash

QObject *obj;
QVariant objVar = QVariant::fromValue(obj);
mapping.insert("myobject", objVar); // Can insert QObject*
@endcode

@section extending_grantlee Extending Grantlee

%Grantlee has 4 extension points.

- Custom object variables
- Filters
- Tags
- Loaders

@subsection custom_objects Custom objects

As already noted, <tt>QObject*</tt> can be inserted into templates. The recommended way to insert custom objects into templates is to create QObject wrappers for your objects. As QObject is introspectable, this will allow lookups to work in a way you define.

@note If you are already familiar with Django you will know that creating wrappers is not necessary in Django. That is because python objects are already fully introspectable.

@code

#include "myperson.h"

class MyPersonWrapper : public QObject
{
  Q_OBJECT
  Q_PROPERTY(QString name READ name)
public:
  MyPersonWrapper(const QString &name, int age);

  QString name() const;

  int age() const;

  QString clear();

};

...

PersonWrapper *linda = new PersonWrapper("Linda", 21);

QVariant lindaVar = QVariant::fromValue(linda);

mapping.insert("person", lindaVar);

...

The name is {{ person.name }} and age is {{ person.age }}.

// Will be rendered as
// The name is Linda and age is .
@endcode

Note that the 'name' of person is accessible in the template, but the 'age' is not. Note also that rendering fails silently if the method can not be found. Only methods which have a corresponding Q_PROPERTY declaration are accessible from templates. To make age accessible in the template, we would need to add

@verbatim
 Q_PROPERTY(int age READ age)
@endverbatim

to the class. Note also that those methods are const. Rendering a template should never change an object it is rendering. Always make sure the READ properties of your wrapper objects are const. It is also possible to lookup dynamic properties of QObjects.

@note If you are familiar with Django you may be aware of the alters_data attribute for methods. This method of using wrappers and const is the equivalent to the alters_data attribute. You the wrapper writer choose the properties which will be accessible from the templates, so there's no need to mark other methods as alters_data.

@subsection libraries Filter and tag Libraries

As already noted, it is possible for application developers to create their own tags and filters. This feature is based on the QtPlugin system so that plugins can be loaded at run time.

@note If you are already familiar with Django, you will know that this is not necessary on that system. That is because Django libraries are just python modules, which can behave like dynamically loaded plugins.

@subsubsection filters Filters

A filter takes an object and an optional argument and returns a string. To create your own filter, create a concrete subclass of Grantlee::Filter and implement the doFilter method.

@code

/// Outputs its input string twice.
class TwiceFilter : public Grantlee::Filter
{
  SafeString dofilter(const QVariant &input, const SafeString &arg = QString(), bool autoescape = false)
  {
    QString str = getSafeString(input).rawString();

    return str + str;
  }

  bool isSafe() { return true; } // see the Autoescaping section
};

...

Seeing double {{ name|twice }}?

// Renders: Seeing double MikeMike?

@endcode

The argument to doFilter is a QString, so it may be necessary to convert it to an integer in your filter.

@code

/// Outputs its input n times.
class RepeatFilter : public Grantlee::Filter
{
  SafeString dofilter(const QVariant &input, const SafeString &arg = QString(), bool autoescape = false)
  {
    QString str = getSafeString(input);
    bool ok;
    int times = arg.toInt(&ok);
    if (!ok)
      // Oops, the argument was not a number. Fail gracefully.
      return str;
    for (int i = 0; i < times ++i)
    {
      str.append(str);
    }
    return str;
  }

  bool isSafe() { return true; }
};

...

Seeing more {{ name|repeat:"3" }}?

// Renders: Seeing more NathalieNathalieNathalie?

Seeing more {{ name|repeat:"four" }}?

// Renders: Seeing more Otto? (failing gracefully)

@endcode

Note that the filter does not fail or throw an exception if the integer conversion fails. Filters should handle all errors gracefully. If an error occurs, return either the input, or an empty string. Whichever is more appropriate.

@subsection autoescaping Autoescaping and safe-ness

Xss stuff.

- http://groups.google.com/group/django-users/browse_thread/thread/311f336d74e7b643
- http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#filters-and-auto-escaping
- http://groups.google.com.tr/group/django-developers/browse_thread/thread/96e516d5915ee334
- http://code.djangoproject.com/ticket/5567


@subsubsection tags Tags

A tag can really do anything with a template. To create your own tag, create a concrete subclass of Grantlee::NodeFactory and implement the getNote method, and create a concrete subclass of Grantlee::Node and implement the render method.

@note If you are familiar with Django you will recognise that defining a tag in Django involves creating a Node subclass (like %Grantlee), and a factory function where %Grantlee requires a factory class. This is because functions in python are objects, just like classes are, and dynamic typing allows easy creation of lists of those factory functions. In %Grantlee with statically-typed c++, we need to group the factories by interface (i.e, the Grantlee::AbstractNodeFactory interface).

Tags can take arguments, advance the parser, create nodes, and generally have broad control over the parsing and rendering stages.

Here is an example of a {% current_time %} tag which displays the current time.

@code

class CurrentTimeTag : public Grantlee::AbstractNodeFactory
{
  Node *getNode(const QString &tagContent, Parser *p, QObject *parent)
  {
    // You almost always want to use smartSplit.
    QStringList content = smartSplit(tagContent);

  }
};

class CurrentTimeNode : public Grantlee::Node
{
  Q_OBJECT
public:
  CurrentTimeNode(QObject *parent)
    : QObject(parent)
  {

  }

  QString render(Context *c)
  {
    return ;
  }
};

@endcode

Also, note that, nodeFactory may set an error at template compilation time, but like Filters, Nodes should handle errors gracefully in their render method, and should return an empty QString in most error cases.

@subsection cpp_libraries

As already mentioned, it is neccessary to create a QtPlugin library to make your tags and filters available to %Grantlee. You need to implement interfaces/taglibraryinterface.h to return your custom node factories and filters. See the existing libraries in your %Grantlee distribution for full examples.

@code

#include "interfaces/taglibraryinterface.h"

#include "mytag.h"
#include "myfilter.h"

class MyLibrary : public QObject, public TagLibraryInterface
{
  Q_OBJECT
  Q_INTERFACES( Grantlee::TagLibraryInterface )
public:
  MyLibrary(QObject *parent = 0)
    : QObject (parent)
  {
    m_nodeFactories.insert("mytag", new MyNodeFactory());

    m_filters.insert("myfilter", new MyFilter());
  }

  QHash<QString, AbstractNodeFactory*> nodeFactories(const QString &name = QString())
  {
    Q_UNUSED(name);
    return m_nodeFactories;
  }

  QHash<QString, Filter*> filters(const QString &name = QString())
  {
    Q_UNUSED(name);
    return m_filters;
  }
};

@endcode

@todo example CMake code.

@subsection qtscript_libraries QtScript Libraries

If you configure your application to use the grantlee_scriptabletags_library, it will be possible for you and theme writers to write tags and filters in QtScript instead of C++. Themers would have as much control as a C++ plugin writer over those steps of processing and rendering the template.

Writing QtScript plugins is slightly different from writing C++ plugins, and is a bit more like writing Django plugins. Namely, in Javascript like python, functions are first-class objects, and javascript is dynamically typed. Additionally QtScript plugins are just text files, so they can easily be dynamicall loaded at runtime.

Here is a complete QtScript library defining an {% echo %} tag which outputs its arguments:

@code
var EchoNode = function(content)
{
  this.content = content;
  this.render = function(context)
  {
    return content.join(" ");
  };
};

function EchoNodeFactory(tagContent, parser, parent)
{
  var content = tagContent.split(" ");
  content = content.slice(1, content.length);
  return new Node("EchoNode", content);
};
EchoNodeFactory.tagName = "echo";
Library.addFactory("EchoNodeFactory");

@endcode

Some things to note:
- Library is a globally accessible object used to register Factories.
- The addFactory method takes a string which is the name of an object, not the object itself.
- The script factory function returns a %Node. The first argument to %Node is the name of the QtScript object in the library which defines the node. All additional arguments will be passed to the constructor of that node.
- The %Node function must have a callable render property which takes a context argument.

@todo \@section qtscript_diff Differences between C++ and QtScript library plugins.

@subsection loaders Loaders

As noted in @ref creating_templates, you will usually not create a Template directly, but retrieve it from a TemplateLoader singleton. The TemplateLoader allows you to define where the templates are retrieved from when you request them by name.

You can redefine the order of places in the filesystem which are searched for templates, and even define new ways to retrieve templates (i.e, not from the filesystem) by subclassing Grantlee::AbstractTemplateResource and implementing the loadByName method. For existing loaders, see FileSystemTemplateResource, InMemoryTemplateResource, and Grantlee::AkonadiTemplateResource.

@section patterns

@subsection resource_stack_pattern Resource Stack
@subsection raw_tag_pattern {% raw %} tag

http://simonwillison.net/2009/May/19/twophased/

@subsection repeater_pattern Repeater

Use a mutable template which can change the nodes it stores. Kopete could use something like this.


*/

}
